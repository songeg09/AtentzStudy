#pragma once

enum DIRECTION
{
	START,
	LEFT = START,
	RIGHT,
	UP,
	DOWN,
	END
};

enum TEXTURE_TYPE
{
	BACKGROUND,
	PLAYER_IDLE_START,
	PLAYER_IDLE_1 = PLAYER_IDLE_START,
	PLAYER_IDLE_2,
	PLAYER_IDLE_3,
	PLAYER_IDLE_4,
	PLAYER_IDLE_5,
	PLAYER_IDLE_6,
	PLAYER_IDLE_7,
	PLAYER_IDLE_8,
	PLAYER_IDLE_END = PLAYER_IDLE_8,
	PLAYER_RUN_START,
	PLAYER_RUN_1 = PLAYER_RUN_START,
	PLAYER_RUN_2,
	PLAYER_RUN_3,
	PLAYER_RUN_4,
	PLAYER_RUN_5,
	PLAYER_RUN_6,
	PLAYER_RUN_7,
	PLAYER_RUN_8,
	PLAYER_RUN_END = PLAYER_RUN_8,
	PLAYER_ATTACK_START,
	PLAYER_ATTACK_1 = PLAYER_ATTACK_START,
	PLAYER_ATTACK_2,
	PLAYER_ATTACK_3,
	PLAYER_ATTACK_4,
	PLAYER_ATTACK_5,
	PLAYER_ATTACK_END = PLAYER_ATTACK_5,
	MONSTER_IDLE_START,
	MONSTER_IDLE_1 = MONSTER_IDLE_START,
	MONSTER_IDLE_2,
	MONSTER_IDLE_3,
	MONSTER_IDLE_END = MONSTER_IDLE_3,
};

class Texture;
class ResourceManager
{
	SINGLETON(ResourceManager)
private:
	std::map<std::wstring, Texture*> m_MapTexture;
	std::wstring GetTextureFileName(TEXTURE_TYPE _eTextureType, DIRECTION _eDirection);
	std::wstring GetDirectionString(DIRECTION _eDirection);
public:
	Texture* LoadTexture(TEXTURE_TYPE _eTextureType, DIRECTION _eDirection = DIRECTION::END);
	Texture* FindTexture(const std::wstring& _strKey);

};

